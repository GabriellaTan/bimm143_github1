---
title: "Class 05 - DataVis with ggplot2"
author: "Gabriella Tanoto (A18024184)"
format: pdf
toc: true
---

# Background
Graphics system examples: "base R" -- included in the package. But, we usually use the **ggplot2**
Let's compare "base" and **ggplot2**. Let's check our example data, `cars`:

```{r}
head(cars, 6)
```

## baseR vs. ggplot2

In baseR, i can just call `plot()`
```{r}
plot(cars)
```

Let's call out **ggplot2**!

First, INSTALL PACKAGE, if not in your R yet. use this function, but in R code! `install.packages("package__name")`

> KEY POINT: Only install packages in R console, don't write it in quarto, cuz u r gonna have to install it every time they render T^T, not good. [this thing shows like a notes]

Before we use the package, you have to load it up using `library()`
```{r}
library(ggplot2)
```

Every ggplot has *at least* 3 things:

- **Data** (in our case, `cars`)
- **Aes**thetics (how the data maps into the plot; i.e., x-axis and y-axis)
- **Geom**etries (determines how the plot will be drawn; i.e., boxplot, dotplots/points, lines, columns, etc.)

```{r}
ggplot(data=cars, 
       aes(x= speed, y= dist)) +
  geom_point()
```

For simple plots, ggplot is a little more verbose than base R. But defaults of ggplot is nicer!
It's easier to customize ggplots than it is to customize baseR. We can add the layers to *aes* and *themes*. For complicated plots, it's much more efficient and structured

>Adding a line to show relationship between speed to stopping distance (ie, adding another 'layer')!

```{r}
carplot <- ggplot(cars) + 
       aes(x= speed, y= dist) +
  geom_point() + geom_smooth(se=TRUE, method="lm")

#se = TRUE/FALSE is when u want the standard error area or not.
#"lm" ('linear models') is to linearize the fit. 

carplot
```

>Adding Title and Subtitles!

```{r}
carplot + labs(title="Cars", 
               subtitle="Speed vs Distance to stop for old ahh cars") +
  xlab("Speed (mph)")+ 
  ylab("Distance to stop (miles)")+
  theme_bw()
```

## Gene Expression Plot: Using different **aes** and **geoms**

Open the gene expression example dataset
```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```
>Q: How many genes are in this dataset?
    - counting the rows: nrow(<dataset>)
    - counting the columns: ncol(<dataset>)

```{r}
nrow(genes)
ncol(genes)
```
> Q: What are the column names? 

```{r}
colnames(genes)
```
>Q: How many "UP" and "DOWN" regulated genes are there?

```{r}
sum(genes$State=="up")
#CAN Only see the number of up's
```
OR:
```{r}
table(genes$State)
```

>Q: Making the 1st plot~

```{r}
ggplot(genes) + 
  aes(x= Condition1, y= Condition2, color=State) +
  scale_color_manual(values=c("red", "grey", "blue")) +
  geom_point() +
  labs(title= "Drugs influence on genes expressions",
       subtitle= "Up-regulated and Down-regulated genes",
       x= "Control (no drugs)",
       y= "Drugged") +
  theme_bw()
```

### mtcars dataset

```{r}
head(mtcars)
```

> Q: Scatter plot of `mpg` and `disp`

```{r}
pScat <- ggplot(mtcars)+
  aes(mpg, disp)+
  geom_point()
pScat
```

> Q: Boxplot of `gear` and `disp`

```{r}
pBox <- ggplot(mtcars)+
  aes(x = gear, y = disp, group = gear)+
  geom_boxplot(fill= c("pink","red", "purple")) +
  theme_classic()
pBox
```

> Q: Barplot of `carb`

```{r}
pBarplot <- ggplot(mtcars)+
  aes(carb)+
  geom_bar()
pBarplot
```


> Q: Smooth of `disp` and `qsec`

```{r}
pSmooth <- ggplot(mtcars)+
  aes(disp, qsec)+
  geom_smooth()
pSmooth
```

What if we wanna compile allllll these plots into one figure w multiple panels?
> Use **Patchwork** package!

```{r}
library(patchwork)
plotCompile <- (pScat / pBarplot |pBox / pSmooth)
plotCompile
```

### Saving plots in a certain Sizing

```{r}
ggsave(plotCompile, filename = "myplot.png", width = 5, height= 3)
```


## Gap Minder - Sect 7 Labsheet

url for labsheet: https://bioboot.github.io/bimm143_S25/class-material/lab05.html#going-further

```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"
gapminder <- read.delim(url)


#look at just 10 lines of it!
head(gapminder, 10)
```
>Q: how many countries is in it?

```{r}
table(gapminder$country)
length(table(gapminder$country))
```
>Q: Plot of GDP v Life expectancy
- When coloring something according to a data, we don't wanna make it as a "string". NO QUOTATION MARKKKKKK
- Facet_wrap will separate all the data according to some kind of group!


```{r}
ggplot(gapminder) +
  aes(gdpPercap, lifeExp, color=continent, size=pop) + 
  geom_point(alpha=0.3) +
  facet_wrap(~continent) +
  theme_bw()

```



